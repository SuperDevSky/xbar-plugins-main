#!/usr/bin/env PYTHONIOENCODING=UTF-8 python3
#
# <xbar.title>Simple IMAP Mail Checker</xbar.title>
# <xbar.version>v0.1</xbar.version>
# <xbar.author>Ashley Anderson</xbar.author>
# <xbar.author.github>albinoloverats</xbar.author.github>
# <xbar.desc>Checks IMAP mail server and displays inbox count</xbar.desc>
# <xbar.image>https://user-images.githubusercontent.com/5545555/236855546-85c58709-498c-4749-b52f-0278ddca8b4d.png</xbar.image>
# <xbar.dependencies>python</xbar.dependencies>

import imaplib

# Add any email accounts here

accounts = [
		{
			"friendly": "Example 1",
			"hostname": "mail.example.com",
			"username": "user@example.com",
			"password": "huner2",
			"messages": 0
		},
		{
			"friendly": "Example 2",
			"hostname": "mail.example.org",
			"username": "another-user",
			"password": "correcthorsebatterystaple",
			"messages": 0
		}
	]

# Do not change anything below

ICON="| dropdown=false templateImage="

def count_messages(account):
	imap = None
	try:
		imap = imaplib.IMAP4_SSL(account["hostname"])
		imap.login(account["username"], account["password"])
		imap.select("Inbox")
		typ, messages = imap.search(None, "UNSEEN")
		if len(messages) > 1:
			account["messages"] = len(messages)
		elif len(messages[0]) > 0:
			account["messages"] = 1
	except:
		return
	finally:
		if imap is not None:
			imap.close()

total = 0
for account in accounts:
	count_messages(account)
	total = total + account["messages"]

if total > 0:
	print("%d %s" % (total, ICON))
else:
	print(ICON)

print("---")

for account in accounts:
	print("%d %s" % (account["messages"], account["friendly"]))
